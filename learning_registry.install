<?php
/**
 * @file
 * Installation file for the learning_registry module.
 *
 * This installation file sets up the database for the learning_registry module.
 */

/**
 * Implements hook_install().
 */
function learning_registry_install() {
  drupal_set_message((st('Installing learning_registry.')));
  drupal_install_schema('learning_registry');
}

/**
 * Implements hook_enable().
 */
function learning_registry_enable() {
  // Set module weight lower than workflow or pathauto. This query lifted from
  // http://drupal.org/node/110238#comment-3567274
  $workflow_weight = db_result(db_query("SELECT weight FROM {system} WHERE type = 'module' AND name = 'workflow'"));
  $pathauto_weight = db_result(db_query("SELECT weight FROM {system} WHERE type = 'module' AND name = 'pathauto'"));

  if ($pathauto_weight > $workflow_weight) {
    $weight = $pathauto_weight;
  }
  else {
    $weight = $workflow_weight;
  }

  db_query("UPDATE {system} SET weight = %d WHERE type = 'module' AND name = 'learning_registry'", $weight + 1);
}

/**
 * Implements hook_uninstall().
 */
function learning_registry_uninstall() {
  drupal_uninstall_schema('learning_registry');
  $result = db_query("SELECT name from {variable} WHERE name LIKE 'learning_registry_%'");
  while ($var_name = db_result($result)) {
    variable_del($var_name);
  }
}

/**
 * Implements hook_schema().
 *
 * @returns $schema
 *   An array providing the DB schema definition required by the schema API.
 */
function learning_registry_schema() {
  $schema['learning_registry'] = array(
    'description' => 'Tracks which Drupal nodes have been published to the registry.',
    'fields' => array(
      'nid' => array(
        'description' => 'The primary identifier for a node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),

      'published' => array(
        'description' => 'The original date of publication to the LR node.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),

      'updated' => array(
        'description' => 'The most recent update to the LR node.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),

      'queued' => array(
        'description' => 'Flag to determine if node is queued for processing.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),

      'docid' => array(
        'description' => 'The doc ID returned on successful submission to the Learning Registry.',
        'type' => 'varchar',
        'length' => 1024,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'indexes' => array(
      'changed' => array('updated'),
    ),
    'primary key' => array('nid'),
  );

  return $schema;
}

/**
 * Implements hook_requirements().
 *
 * @returns $requirements
 *   An array requirements met or not met.
 */
function learning_registry_requirements($phase) {
  $requirements = array();

  $requirements['phpdom'] = array(
    'title' => st('PHP document object model'),
  );

  if (class_exists('DOMDocument')) {
    $requirements['phpdom']['value'] = st('Installed');
    $requirements['phpdom']['severity'] = REQUIREMENT_OK;
  }
  else {
    $requirements['phpdom']['value'] = st('Not installed');
    $requirements['phpdom']['description'] = st('External links filter requires PHP <a href="http://php.net/manual/en/book.dom.php">Document Object Model</a>.');
    $requirements['phpdom']['severity'] = REQUIREMENT_ERROR;
  }

  return $requirements;
}

